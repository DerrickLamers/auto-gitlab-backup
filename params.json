{"name":"Auto-gitlab-backup","tagline":"A script to use omnibus-gitlab's own backup ```gitlab-rake``` command on a cron schedule and rsync to another server, if wanted.","body":"# Auto GitLab Backup\r\n\r\n[![AGB Logo](https://raw.githubusercontent.com/sund/auto-gitlab-backup/develop/agb_logo.png)](http://sund.la/glup)\r\n\r\n----\r\n\r\n## Synopsis\r\n\r\nA script to use omnibus-gitlab's own backup ```gitlab-rake``` command on a cron schedule and rsync to another server, if wanted. There is also a restore script available (see below.)\r\n\r\nIt can backup and copy the Gitlab-CI DB, if configured.\r\n\r\nThis script is now more omnibus-gitlab centric. Compare your config file with the template! Usage with a source install is possible but not expressly shown here.\r\n\r\n## Installation\r\n\r\n### Prerequisites\r\n\r\nDeploy a working GitLab installation and verify you can back it up with the rake task as documented in the [GitLab Documents](http://doc.gitlab.com/ce/raketasks/backup_restore.html).\r\n\r\n#### Set up gitlab to expire backups\r\n\r\nChange ```/etc/gitlab/gitlab.rb``` to expire backups\r\n\r\n```\r\n# backup keep time\r\ngitlab_rails['backup_keep_time'] = 604800\r\n```\r\n\r\nIf you use the CI server, enable CI Backup expiration\r\n\r\n```\r\n## Backup settings\r\n  backup:\r\n    path: \"tmp/backups\"   # Relative paths are relative to Rails.root (default: tmp/backups/)\r\n# limit CI backup lifetime to 7 days - 604800 seconds\r\ngitlab_ci['backup_keep_time'] = 604800\r\n```\r\n\r\n### Installation\r\n\r\nClone to your directory of choice. I usually use ```/usr/local/sbin```\r\n\r\n```\r\ngit clone git@github.com:sund/auto-gitlab-backup.git\r\n```\r\n\r\n### Configure\r\n\r\n```bash\r\ncp auto-gitlab-backup.conf.sample auto-gitlab-backup.conf\r\n```\r\n\r\nedit ```auto-gitlab-backup.conf```\r\n\r\n```bash\r\n## user account on remote server\r\n#  likely 'git' user\r\nremoteUser=\"\"\r\n\r\n## remote host\r\n#  a backup gitlab server?\r\nremoteServer=\"\"\r\n\r\n## path to an alternate ssh key, if needed.\r\nsshKeyPath=\"\"\r\n\r\n## $remoteServer path for gitlab backups\r\nremoteDest=\"/var/opt/gitlab/backups\"\r\n\r\n## Using the CI server?\r\n#  change to true or 1 to enable CI backups\r\nenableCIBackup=\"0\"\r\n\r\n## $remoteServer dest for CI backups on remote\r\nciRemoteDest=\"/var/opt/gitlab/ci-backups\"\r\n\r\n## ssh port or 873 for rsyncd port\r\nremotePort=22\r\n\r\n## git user home.\r\n#  Only change the below setting if you have git's home in a different location\r\ngitHome=\"/var/opt/gitlab\"\r\n\r\n## only set below if rvm is in use and you need to source the rvm env file\r\n# echo $(rvm env --path)\r\nRVM_envPath=\"\"\r\n\r\n## only use the below settings if your destination is using rsync in daemon mode\r\nremoteModule=\"\"\r\nrsync_password_file=\"\"\r\n\r\n## Check remote quota\r\n#  change to true or 1 to enable\r\ncheckQuota=\"0\"\r\n\r\n```\r\n\r\n### cron settings\r\n\r\nExample for crontab to run at 5:05am everyday.\r\n\r\n```bash\r\n5 5 * * * /usr/local/sbin/auto-gitlab-backup/auto-gitlab-backup.sh\r\n```\r\n\r\n## Restore\r\n\r\n*Still under development but useful*\r\n\r\nrun ```./restoreGitLab.sh -r``` and it will attempt to restore a backup. You may have to run some rake commands manually.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}